{"version":3,"sources":["colors.ts","App.tsx"],"names":["theme","App","useState","working","setWorking","text","setText","toDos","setToDos","useEffect","loadToDos","saveToDos","toSave","a","async","AsyncStorage","setItem","JSON","stringify","console","log","getItem","s","t","parse","doneToDo","key","newToDos","done","View","style","styles","container","StatusBar","header","TouchableOpacity","onPress","Text","fontSize","fontWeight","color","TextInput","onSubmitEditing","Date","now","editToggle","onChangeText","payload","value","returnKeyType","placeholder","input","ScrollView","Object","keys","map","toDo","e","nativeEvent","fixToDo","doneText","toDoText","box","editToDo","AntDesign","name","size","check","Platform","OS","confirm","Alert","alert","deleteToDo","Fontisto","StyleSheet","create","flex","backgroundColor","paddingHorizontal","flexDirection","paddingRight","justifyContent","marginTop","paddingVertical","borderRadius","marginVertical","marginBottom","alignItems"],"mappings":"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","file":"static/js/app.59b47389.chunk.js","sourcesContent":["export const theme = {\r\n  bg: \"black\",\r\n  grey: \"#3A3D40\",\r\n  toDoBg: \"#1A1C20\",\r\n};\r\n","import { StatusBar } from \"expo-status-bar\";\nimport React, { useEffect, useState } from \"react\";\nimport {\n  StyleSheet,\n  Text,\n  View,\n  TouchableOpacity,\n  TextInput,\n  Alert,\n  ScrollView,\n  Platform,\n  NativeSyntheticEvent,\n  TextInputSubmitEditingEventData,\n} from \"react-native\";\nimport { Fontisto, AntDesign } from \"@expo/vector-icons\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport { theme } from \"./colors\";\n\ninterface ItoDo {\n  [key: string]: {\n    text: string;\n    done: boolean;\n    working: boolean;\n    editToggle: boolean;\n  };\n}\n\nconst STORAGE_KEY = \"@toDos\";\nconst TAB_STATE = \"@tabs\";\n\nexport default function App() {\n  const [working, setWorking] = useState(true);\n  const [text, setText] = useState(\"\");\n  const [toDos, setToDos] = useState<ItoDo>({});\n\n  useEffect(() => {\n    loadToDos();\n  }, []);\n\n  const travel = async () => {\n    try {\n      setWorking(false);\n      await AsyncStorage.setItem(TAB_STATE, JSON.stringify(false));\n    } catch (e) {\n      console.log(e);\n    }\n  };\n  const work = async () => {\n    try {\n      setWorking(true);\n      await AsyncStorage.setItem(TAB_STATE, JSON.stringify(true));\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  const onChangeText = (payload: string) => setText(payload);\n\n  const saveToDos = async (toSave: object) => {\n    try {\n      await AsyncStorage.setItem(STORAGE_KEY, JSON.stringify(toSave));\n    } catch (e) {\n      console.log(e);\n    }\n  };\n  const loadToDos = async () => {\n    try {\n      const s = await AsyncStorage.getItem(STORAGE_KEY);\n      const t = await AsyncStorage.getItem(TAB_STATE);\n      if (s) {\n        setToDos(JSON.parse(s));\n      }\n      if (t) {\n        setWorking(JSON.parse(t));\n      }\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  const addToDo = async () => {\n    if (text === \"\") {\n      return;\n    }\n    try {\n      // deep copy\n      const newToDos = {\n        ...toDos,\n        [Date.now()]: { text, done: false, working, editToggle: false },\n      };\n      setToDos(newToDos);\n      await saveToDos(newToDos);\n      setText(\"\");\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  const deleteToDo = (key: string) => {\n    if (Platform.OS === \"web\") {\n      const ok = confirm(\"Do you want to delete this Todo?\");\n      if (ok) {\n        const newToDos = { ...toDos };\n        delete newToDos[key];\n        setToDos(newToDos);\n        saveToDos(newToDos);\n      }\n    } else {\n      // 3번째 인자인 배열에는 버튼들이 위치한다\n      Alert.alert(\"Delete To Do\", \"Are you sure?\", [\n        { text: \"Cancel\" },\n        {\n          text: \"Delete\",\n          style: \"destructive\",\n          // 선택시 동작\n          onPress: () => {\n            const newToDos = { ...toDos };\n            delete newToDos[key];\n            setToDos(newToDos);\n            saveToDos(newToDos);\n          },\n        },\n      ]);\n    }\n  };\n\n  const doneToDo = (key: string) => {\n    const newToDos = { ...toDos };\n    newToDos[key].done = !newToDos[key].done;\n    setToDos(newToDos);\n    saveToDos(newToDos);\n  };\n\n  const editToDo = (key: string) => {\n    const newToDos = { ...toDos };\n    newToDos[key].editToggle = !newToDos[key].editToggle;\n    setToDos(newToDos);\n    saveToDos(newToDos);\n  };\n\n  const fixToDo = (\n    e: NativeSyntheticEvent<TextInputSubmitEditingEventData>,\n    key: string\n  ) => {\n    const newToDos = { ...toDos };\n    newToDos[key].text = e.nativeEvent.text;\n    newToDos[key].editToggle = !newToDos[key].editToggle;\n    setToDos(newToDos);\n    saveToDos(newToDos);\n  };\n  return (\n    <View style={styles.container}>\n      <StatusBar style=\"auto\" />\n      <View style={styles.header}>\n        <TouchableOpacity onPress={work}>\n          <Text\n            style={{\n              fontSize: 38,\n              fontWeight: \"600\",\n              color: working ? \"white\" : theme.grey,\n            }}\n          >\n            Work\n          </Text>\n        </TouchableOpacity>\n        <TouchableOpacity onPress={travel}>\n          <Text\n            style={{\n              fontSize: 38,\n              fontWeight: \"600\",\n              color: !working ? \"white\" : theme.grey,\n            }}\n          >\n            Travel\n          </Text>\n        </TouchableOpacity>\n      </View>\n      <TextInput\n        onSubmitEditing={addToDo}\n        onChangeText={onChangeText}\n        value={text}\n        returnKeyType=\"done\"\n        placeholder={\n          working ? \"What do you have to do?\" : \"Where do you want to go?\"\n        }\n        style={styles.input}\n      />\n      <ScrollView>\n        {Object.keys(toDos).map((key) =>\n          toDos[key].working === working ? (\n            <View style={styles.toDo} key={key}>\n              {toDos[key].editToggle ? (\n                <TextInput\n                  onSubmitEditing={(e) => fixToDo(e, key)}\n                  returnKeyType=\"done\"\n                  placeholder={toDos[key].text}\n                  style={styles.input}\n                />\n              ) : (\n                <Text\n                  style={toDos[key].done ? styles.doneText : styles.toDoText}\n                >\n                  {toDos[key].text}\n                </Text>\n              )}\n              <View style={styles.box}>\n                <TouchableOpacity onPress={() => editToDo(key)}>\n                  <AntDesign name=\"edit\" size={24} style={styles.check} />\n                </TouchableOpacity>\n                {toDos[key].done ? (\n                  <TouchableOpacity onPress={() => doneToDo(key)}>\n                    <AntDesign name=\"reload1\" size={24} style={styles.check} />\n                  </TouchableOpacity>\n                ) : (\n                  <TouchableOpacity onPress={() => doneToDo(key)}>\n                    <AntDesign name=\"check\" size={24} style={styles.check} />\n                  </TouchableOpacity>\n                )}\n                <TouchableOpacity onPress={() => deleteToDo(key)}>\n                  <Fontisto name=\"trash\" size={18} color={theme.grey} />\n                </TouchableOpacity>\n              </View>\n            </View>\n          ) : null\n        )}\n      </ScrollView>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: theme.bg,\n    paddingHorizontal: 20,\n  },\n  box: {\n    flexDirection: \"row\",\n  },\n  check: {\n    paddingRight: 20,\n    color: \"white\",\n  },\n  header: {\n    justifyContent: \"space-between\",\n    flexDirection: \"row\",\n    marginTop: 100,\n  },\n\n  input: {\n    backgroundColor: \"white\",\n    paddingVertical: 15,\n    paddingHorizontal: 20,\n    borderRadius: 30,\n    marginVertical: 20,\n    fontSize: 18,\n  },\n  toDo: {\n    backgroundColor: theme.toDoBg,\n    marginBottom: 10,\n    paddingVertical: 20,\n    paddingHorizontal: 20,\n    borderRadius: 15,\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    justifyContent: \"space-between\",\n  },\n  toDoText: {\n    color: \"white\",\n    fontSize: 16,\n    fontWeight: \"600\",\n  },\n  doneText: {\n    color: theme.grey,\n  },\n});\n"],"sourceRoot":""}